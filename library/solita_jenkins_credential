#!/usr/bin/python
SCRIPT="""
import groovy.json.*
import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey;
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource;

jsonSlurper = new JsonSlurper()
def params = jsonSlurper.parseText("%s")

result = [
    changed: false
]

def jenkins = Jenkins.getInstance()
def store = SystemCredentialsProvider.getInstance().getStore()
def allCreds = store.getCredentials(Domain.global())
def oldCred = allCreds.findResult { it?.id == params.id ? it : null }

if (params.state == 'present') {
    def newCred
    if (params.password) {
        newCred = new UsernamePasswordCredentialsImpl(
            CredentialsScope.GLOBAL, params.id,
            params.description, params.username, params.password)
    } else {
        newCred = new BasicSSHUserPrivateKey(
            CredentialsScope.GLOBAL, params.id,
            params.username,
            new BasicSSHUserPrivateKey$DirectEntryPrivateKeySource(params.private_key.trim()),
            params.passphrase, params.description)
    }

    if (oldCred) {
        def changed
        if (params.password) {
            changed = (!(oldCred instanceof UsernamePasswordCredentialsImpl) ||
                params.username != oldCred.getUsername() ||
                params.password != oldCred.getPassword().getPlainText() ||
                params.description != oldCred.getDescription())
        } else {
            changed = (!(oldCred instanceof BasicSSHUserPrivateKey) ||
                params.username != oldCred.getUsername() ||
                params.private_key.trim() != oldCred.getPrivateKeySource().getPrivateKey().toString().trim() ||
                params.passphrase != (oldCred.getPassphrase()?.getPlainText() ?: '') ||
                params.description != oldCred.getDescription())
        }
        if (changed) {
            assert store.updateCredentials(Domain.global(), oldCred, newCred)
            result.changed = true
        }
    } else {
        assert store.addCredentials(Domain.global(), newCred)
        result.changed = true
    }
} else {
    if (oldCred) {
        assert store.removeCredentials(Domain.global(), oldCred)
        result.changed = true
    }
}
jenkins.save()

println JsonOutput.toJson(result)
"""

import json

def escape(s):
    return s.replace('\\', '\\\\').replace('"', '\\"').replace('$', '\\$')

def main():
    module = AnsibleModule(
        argument_spec = dict(
            solita_jenkins_cli=dict(type='str', required=True),
            id=dict(type='str', required=True),
            username=dict(type='str'),
            password=dict(type='str'),
            private_key=dict(type='str'),
            passphrase=dict(type='str'),
            description=dict(type='str'),
            state=dict(choices=['present', 'absent'], default='present')
        )
    )

    script_args_json = json.dumps(
            dict(id=module.params.get('id'),
                username=module.params.get('username'),
                password=module.params.get('password'),
                private_key=module.params.get('private_key'),
                passphrase=module.params.get('passphrase'),
                description=module.params.get('description'),
                state=module.params.get('state')))

    rc, stdout, stderr = module.run_command(
            "%(solita_jenkins_cli)s groovy =" % module.params,
            data=(SCRIPT % escape(script_args_json)))

    if (rc != 0):
        module.fail_json(msg=stderr)

    if (rc == 0):
        module.exit_json(msg=stdout.rstrip())

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

